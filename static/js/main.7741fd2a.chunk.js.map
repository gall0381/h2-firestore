{"version":3,"sources":["firebaseConfig.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","App","useState","newSpecies","setSpecies","newGenus","setGenus","updatedSpecies","setUpdatedSpecies","updatedGenus","setUpdatedGenus","animals","setAnimals","flowers","setFlowers","trees","setTrees","animalsColRef","collection","flowersColRef","treesColRef","React","value","setValue","createAnimal","a","addDoc","species","genus","createFlower","createTree","updateAnimal","id","animalDoc","doc","updateDoc","updateFlower","flowerDoc","updateTree","treeDoc","deleteAnimal","deleteDoc","deleteFlower","deleteTree","useEffect","getDocs","data","docs","map","getAnimals","getFlowers","getTrees","className","Box","sx","width","typography","TabContext","borderBottom","borderColor","TabList","onChange","event","newValue","Tab","label","disabled","TabPanel","TextField","m","size","target","Button","variant","onClick","animal","Card","maxWidth","CardContent","Typography","gutterBottom","component","color","CardActions","flower","tree","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7741fd2a.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app'\nimport { getFirestore } from 'firebase/firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCGCd3Lpy0GW1m-WFy6TU9CfciOVcGd-XQ\",\n    authDomain: \"h2-firebase-8b64e.firebaseapp.com\",\n    projectId: \"h2-firebase-8b64e\",\n    storageBucket: \"h2-firebase-8b64e.appspot.com\",\n    messagingSenderId: \"785760414723\",\n    appId: \"1:785760414723:web:d343655cce27a712e0b236\"\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const db = getFirestore(app);","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { db } from \"./firebaseConfig\";\nimport { collection, getDocs, onSnapshot, addDoc, updateDoc, deleteDoc, doc } from \"firebase/firestore\";\nimport Button from '@mui/material/Button'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nfunction App() {\n\n  const [newSpecies, setSpecies] = useState(\"\")\n  const [newGenus, setGenus] = useState(\"\")\n  const [updatedSpecies, setUpdatedSpecies] = useState(\"\")\n  const [updatedGenus, setUpdatedGenus] = useState(\"\")\n  const [animals, setAnimals] = useState([]);\n  const [flowers, setFlowers] = useState([]);\n  const [trees, setTrees] = useState([]);\n\n  //variables for firebase collections\n  const animalsColRef = collection(db, 'animals');\n  const flowersColRef = collection(db, 'flowers');\n  const treesColRef = collection(db, 'trees');\n\n  //tabs\n  const [value, setValue] = React.useState('1');\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  //handle create\n  const createAnimal = async () => {\n    await addDoc(animalsColRef, { species: newSpecies, genus: newGenus })\n  }\n\n  const createFlower = async () => {\n    await addDoc(flowersColRef, { species: newSpecies, genus: newGenus })\n  }\n\n  const createTree = async () => {\n    await addDoc(treesColRef, { species: newSpecies, genus: newGenus })\n  }\n\n  //update operations\n  const updateAnimal = async (id, species, genus) => {\n    const animalDoc = doc(db, \"animals\", id)\n    await updateDoc(animalDoc, { species: updatedSpecies, genus: updatedGenus })\n  }\n\n\n  const updateFlower = async (id, species, genus) => {\n    const flowerDoc = doc(db, 'flowers', id)\n    await updateDoc(flowerDoc, { species: updatedSpecies, genus: updatedGenus })\n  }\n\n  const updateTree = async (id, species, genus) => {\n    const treeDoc = doc(db, 'trees', id)\n    await updateDoc(treeDoc, { species: updatedSpecies, genus: updatedGenus })\n  }\n\n  //delete operations\n  const deleteAnimal = async (id) => {\n    const animalDoc = doc(db, 'animals', id)\n    await deleteDoc(animalDoc)\n  }\n\n  const deleteFlower = async (id) => {\n    const flowerDoc = doc(db, 'flowers', id)\n    await deleteDoc(flowerDoc)\n  }\n\n  const deleteTree = async (id) => {\n    const treeDoc = doc(db, 'trees', id)\n    await deleteDoc(treeDoc)\n  }\n\n  useEffect(() => {\n    const getAnimals = async () => {\n      const data = await getDocs(animalsColRef);\n      setAnimals(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n    };\n    getAnimals();\n\n    const getFlowers = async () => {\n      const data = await getDocs(flowersColRef);\n      setFlowers(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n    };\n    getFlowers();\n\n    const getTrees = async () => {\n      const data = await getDocs(treesColRef);\n      setTrees(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n    };\n    getTrees();\n\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-Header\">\n        <div className=\"App-Title\">\n          <h2>Firestore App &nbsp;✽</h2>\n        </div>\n        <div className=\"App-Link\">\n          <p>Created by Naomi Gallupe</p>\n        </div>\n      </div>\n      <Box sx={{ width: '100%', typography: 'body1' }}>\n        <TabContext value={value}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <TabList onChange={handleChange} >\n              <Tab label=\"Categories:\" disabled />\n              <Tab label=\"Animals\" value=\"animals\" />\n              <Tab label=\"Flowers\" value=\"flowers\" />\n              <Tab label=\"Trees\" value=\"trees\" />\n            </TabList>\n          </Box>\n          <div className=\"Instructions\">\n            <p>In this app, you can add, update or delete from any category. To update, click in the text field of the animal, flower, or tree you wish to update. Then click the update button.</p>\n            <p>Please note, you will need to refresh the page to observe any changes as onSnapshot is not implemented. Apologies for the inconvenience.</p>\n            <p>Click on any of the above tabs to begin.</p>\n          </div>\n          <TabPanel value=\"animals\">\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Species\"\n              onChange={(event) => {\n                setSpecies(event.target.value);\n              }}\n            />\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Genus\"\n              onChange={(event) => {\n                setGenus(event.target.value);\n              }}\n            />\n            <Button sx={{ m: 0.5 }} variant=\"outlined\" onClick={createAnimal}>Add New Animal</Button>\n            {animals.map((animal) => {\n              return (\n                <div>\n                  <Card sx={{ maxWidth: 600, m: 2 }} variant=\"outlined\">\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        Species: {animal.species}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Genus: {animal.genus}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Species\"\n                        onChange={(event) => {\n                          setUpdatedSpecies(event.target.value);\n                        }}\n                      />\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Genus\"\n                        onChange={(event) => {\n                          setUpdatedGenus(event.target.value);\n                        }}\n                      />\n                      <Button variant=\"outlined\"\n                        onClick={() =>\n                          updateAnimal(animal.id, animal.species, animal.genus)}\n                      >\n                        Update Animal\n                      </Button>\n                      <Button variant=\"outlined\" color=\"error\"\n                        onClick={() =>\n                          deleteAnimal(animal.id)}>\n                        Delete Animal\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </div>\n              )\n            })}\n          </TabPanel>\n          <TabPanel value=\"flowers\">\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Species\"\n              onChange={(event) => {\n                setSpecies(event.target.value);\n              }}\n            />\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Genus\"\n              onChange={(event) => {\n                setGenus(event.target.value);\n              }}\n            />\n            <Button sx={{ m: 0.5 }} variant=\"outlined\" onClick={createFlower}>Add New Flower</Button>\n            {flowers.map((flower) => {\n              return (\n                <div>\n                  <Card sx={{ maxWidth: 600, m: 2 }} variant=\"outlined\">\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        Species: {flower.species}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Genus: {flower.genus}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Species\"\n                        onChange={(event) => {\n                          setUpdatedSpecies(event.target.value);\n                        }}\n                      />\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Genus\"\n                        onChange={(event) => {\n                          setUpdatedGenus(event.target.value);\n                        }}\n                      />\n                      <Button variant=\"outlined\"\n                        onClick={() =>\n                          updateFlower(flower.id, flower.species, flower.genus)}>\n                        Update Flower\n                      </Button>\n                      <Button variant=\"outlined\" color=\"error\"\n                        onClick={() =>\n                          deleteFlower(flower.id)}>\n                        Delete Flower\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </div>\n              )\n            })}\n          </TabPanel>\n          <TabPanel value=\"trees\">\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Species\"\n              onChange={(event) => {\n                setSpecies(event.target.value);\n              }}\n            />\n            <TextField sx={{ m: 0.5 }} size=\"small\"\n              label=\"Genus\"\n              onChange={(event) => {\n                setGenus(event.target.value);\n              }}\n            />\n            <Button sx={{ m: 0.5 }} variant=\"outlined\" onClick={createTree}>Add New Tree</Button>\n            {trees.map((tree) => {\n              return (\n                <div>\n                  <Card sx={{ maxWidth: 600, m: 2 }} variant=\"outlined\">\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        Species: {tree.species}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Genus: {tree.genus}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Species\"\n                        onChange={(event) => {\n                          setUpdatedSpecies(event.target.value);\n                        }}\n                      />\n                      <TextField sx={{ m: 0.5 }} size=\"small\"\n                        label=\"Genus\"\n                        onChange={(event) => {\n                          setUpdatedGenus(event.target.value);\n                        }}\n                      />\n                      <Button variant=\"outlined\"\n                        onClick={() =>\n                          updateTree(tree.id, tree.species, tree.genus)}>\n                        Update Tree\n                      </Button>\n                      <Button variant=\"outlined\" color=\"error\"\n                        onClick={() =>\n                          deleteTree(tree.id)}>\n                        Delete Tree\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </div>\n              )\n            })}\n          </TabPanel>\n        </TabContext>\n      </Box>\n    </div>\n\n\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}